"""Consistency naming

Revision ID: bacef8beb4df
Revises: 42b18c3a031b
Create Date: 2016-04-09 02:02:33.800058

"""

# revision identifiers, used by Alembic.
revision = 'bacef8beb4df'
down_revision = '42b18c3a031b'
branch_labels = None
depends_on = None

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

def upgrade():
    ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('virtual_people')
    op.add_column('account_permissions', sa.Column('last_used_timestamp', sa.DateTime(), nullable=True))
    op.drop_column('account_permissions', 'last_used')
    op.add_column('group_membership', sa.Column('person_id', sa.Integer(), nullable=True))
    op.drop_constraint(u'group_membership_group_id_people_id_key', 'group_membership', type_='unique')
    op.create_unique_constraint(None, 'group_membership', ['group_id', 'person_id'])
    op.drop_constraint(u'group_membership_people_id_fkey', 'group_membership', type_='foreignkey')
    op.create_foreign_key(None, 'group_membership', 'people', ['person_id'], ['id'])
    op.drop_column('group_membership', 'people_id')
    op.create_unique_constraint(None, 'group_type', ['id'])
    op.add_column('groups', sa.Column('creation_timestamp', sa.DateTime(), nullable=True))
    op.add_column('groups', sa.Column('updated_timestamp', sa.DateTime(), nullable=True))
    op.drop_column('groups', 'updated')
    op.drop_column('groups', 'created')
    op.add_column('people', sa.Column('creation_timestamp', sa.DateTime(), nullable=True))
    op.add_column('people', sa.Column('login_timestamp', sa.DateTime(), nullable=True))
    op.add_column('people', sa.Column('status_timestamp', sa.DateTime(), nullable=True))
    op.add_column('people', sa.Column('update_timestamp', sa.DateTime(), nullable=True))
    op.drop_column('people', 'date_updated')
    op.drop_column('people', 'date_created')
    op.drop_column('people', 'last_logged')
    op.drop_column('people', 'status_change')
    op.add_column('people_activity_log', sa.Column('person_id', sa.Integer(), nullable=True))
    op.drop_constraint(u'people_activity_log_people_fkey', 'people_activity_log', type_='foreignkey')
    op.create_foreign_key(None, 'people_activity_log', 'people', ['person_id'], ['id'])
    op.drop_column('people_activity_log', 'people')
    op.add_column('trusted_perms', sa.Column('last_used_timestamp', sa.DateTime(), nullable=True))
    op.drop_column('trusted_perms', 'last_used')
    ### end Alembic commands ###


def downgrade():
    ### commands auto generated by Alembic - please adjust! ###
    op.add_column('trusted_perms', sa.Column('last_used', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.drop_column('trusted_perms', 'last_used_timestamp')
    op.add_column('people_activity_log', sa.Column('people', sa.INTEGER(), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'people_activity_log', type_='foreignkey')
    op.create_foreign_key(u'people_activity_log_people_fkey', 'people_activity_log', 'people', ['people'], ['id'])
    op.drop_column('people_activity_log', 'person_id')
    op.add_column('people', sa.Column('status_change', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.add_column('people', sa.Column('last_logged', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.add_column('people', sa.Column('date_created', postgresql.TIMESTAMP(), autoincrement=False, nullable=False))
    op.add_column('people', sa.Column('date_updated', postgresql.TIMESTAMP(), autoincrement=False, nullable=False))
    op.drop_column('people', 'update_timestamp')
    op.drop_column('people', 'status_timestamp')
    op.drop_column('people', 'login_timestamp')
    op.drop_column('people', 'creation_timestamp')
    op.add_column('groups', sa.Column('created', postgresql.TIMESTAMP(), autoincrement=False, nullable=False))
    op.add_column('groups', sa.Column('updated', postgresql.TIMESTAMP(), autoincrement=False, nullable=False))
    op.drop_column('groups', 'updated_timestamp')
    op.drop_column('groups', 'creation_timestamp')
    op.drop_constraint(None, 'group_type', type_='unique')
    op.add_column('group_membership', sa.Column('people_id', sa.INTEGER(), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'group_membership', type_='foreignkey')
    op.create_foreign_key(u'group_membership_people_id_fkey', 'group_membership', 'people', ['people_id'], ['id'])
    op.drop_constraint(None, 'group_membership', type_='unique')
    op.create_unique_constraint(u'group_membership_group_id_people_id_key', 'group_membership', ['group_id', 'people_id'])
    op.drop_column('group_membership', 'person_id')
    op.add_column('account_permissions', sa.Column('last_used', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.drop_column('account_permissions', 'last_used_timestamp')
    op.create_table('virtual_people',
    sa.Column('id', sa.INTEGER(), nullable=False),
    sa.Column('username', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('parent', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('type', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('last_logged', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['parent'], [u'people.id'], name=u'virtual_people_parent_fkey'),
    sa.PrimaryKeyConstraint('id', name=u'virtual_people_pkey'),
    sa.UniqueConstraint('username', name=u'virtual_people_username_key')
    )
    ### end Alembic commands ###
